- if @payment.payable.is_a?(ServiceInvoice)
  - payable = @payment.payable.becomes(Invoice)
- else
  - payable = @payment.payable

= semantic_form_for [payable, @payment], html: {'data-stripe-key' => Rails.configuration.stripe[:publishable_key]}, remote: true do |f|
  = myrject :modal do |m|
    - m.title 'Payment'
    - m.body
      .payment-problems
        = render 'errors', obj: @payment, title: 'The payment could not be processed.'
      - if @payment.persisted?
        = render 'info', :payment => @payment
        = f.hidden_field :amount, :class => 'cc-amount'
      - else
        .form-wrapper style="margin-bottom: 20px;"
          = f.input :payment_account, :collection => options_for_select(Payment.payments_accepted)
        = myrject :card do |c|
          - c.title 'Details'
          - c.body
            - Payment.payment_forms.each do |payment_form|
              .payment-form class=payment_form
                = render payment_form.to_s, :f => f
      - unless @payment.payable.is_a?(Proposal)
        = render 'open_invoices', :f => f
    - m.footer
      = f.hidden_field :customer_id
      = f.hidden_field :payable_id
      = f.hidden_field :payable_type
      = f.action :submit, as: :input, label: 'Submit Payment'

coffee:
  payments.initTestData('select.test-data', 'form.payment')
  payments.initPayment('form.payment')
  h.focusModal('select#payment_payment_account')
  window.stripeResponseHandler = payments.responseHandler
